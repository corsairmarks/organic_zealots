# this = country
set_policies_robot_pops_and_ai_to_outlawed = {
	optimize_memory
	if = {
		limit = {
			is_gestalt = no
			can_set_ai_policy = yes
			NOT = { has_policy_flag = ai_outlawed }
		}
		set_policy = {
			policy = artificial_intelligence_policy
			option = ai_outlawed
			cooldown = yes
		}
	}
	if = {
		limit = {
			is_gestalt = no
			NOT = { has_policy_flag = robots_outlawed }
		}
		set_policy = {
			policy = robot_pop_policy
			option = robot_pops_outlawed
			cooldown = yes
		}
	}
}

# this = country
force_disable_tech_ascension_special_projects = {
	optimize_memory
	if = {
		limit = {
			has_tradition = tr_cybernetics_adopt
			NOT = { has_country_flag = cyborg_empire }
			OR = {
				has_special_project = FLESH_IS_WEAK_PROJECT
				is_researching_special_project = FLESH_IS_WEAK_PROJECT
			}
		}
		abort_special_project = { type = FLESH_IS_WEAK_PROJECT }
		set_country_flag = flesh_is_weak_project_aborted_by_organic_zealots
	}
	if = {
		limit = {
			has_active_tradition = tr_synthetics_synthetic_age
			is_robot_empire = no
			OR = {
				has_special_project = SYNTHETIC_EVOLUTION_PROJECT
				is_researching_special_project = SYNTHETIC_EVOLUTION_PROJECT
			}
		}
		abort_special_project = { type = SYNTHETIC_EVOLUTION_PROJECT }
		set_country_flag = synthetic_evolution_project_aborted_by_organic_zealots
	}
}

# this = country
re_enable_tech_ascension_special_projects_if_force_disabled = {
	optimize_memory
	if ={
		limit = {
			has_tradition = tr_cybernetics_adopt
			has_country_flag = flesh_is_weak_project_aborted_by_organic_zealots
			NOR = {
				has_country_flag = cyborg_empire
				has_special_project = FLESH_IS_WEAK_PROJECT
				is_researching_special_project = FLESH_IS_WEAK_PROJECT
			}
		}
		save_event_target_as = flesh_weak_owner # required so the project has its expected event_target
		enable_special_project = {
			name = FLESH_IS_WEAK_PROJECT
			owner = this
			location = capital_scope
		}
		remove_country_flag = flesh_is_weak_project_aborted_by_organic_zealots
	}
	if ={
		limit = {
			has_active_tradition = tr_synthetics_synthetic_age
			has_country_flag = synthetic_evolution_project_aborted_by_organic_zealots
			is_robot_empire = no
			NOR = {
				has_special_project = SYNTHETIC_EVOLUTION_PROJECT
				is_researching_special_project = SYNTHETIC_EVOLUTION_PROJECT
			}
		}
		save_event_target_as = synth_evo_owner # required so the project has its expected event_target
		enable_special_project = {
			name = SYNTHETIC_EVOLUTION_PROJECT
			owner = this
			location = capital_scope
		}
		remove_country_flag = synthetic_evolution_project_aborted_by_organic_zealots
	}
}

# this = country
deactivate_ongoing_tech_assimilation = {
	optimize_memory
	every_owned_pop_species = {
		limit = {
			has_citizenship_type = {
				type = citizenship_assimilation
				country = prev
			}
			OR = {
				has_living_standard = {
					type = living_standard_cyborg_ego_assimilation
					country = prev
				}
				has_living_standard = {
					type = living_standard_cyborg_ego_assimilation_psionic
					country = prev
				}
				has_living_standard = {
					type = living_standard_cyborg_assimilation
					country = prev
				}
				has_living_standard = {
					type = living_standard_cyborg_assimilation_psionic
					country = prev
				}
				has_living_standard = {
					type = living_standard_tech_assimilation
					country = prev
				}
			}
		}
		every_species_pop = {
			limit = { is_owned_by = prevprev }
			# former_citizenship_type is not eligible to use with a switch
			if = {
				limit = { former_citizenship_type = citizenship_full }
				set_citizenship_type = {
					type = citizenship_full
					country = prevprev
					cooldown = yes
				}
			}
			else_if = {
				limit = { former_citizenship_type = citizenship_limited }
				set_citizenship_type = {
					type = citizenship_limited
					country = prevprev
					cooldown = yes
				}
			}
			else_if = {
				limit = { former_citizenship_type = citizenship_slavery }
				set_citizenship_type = {
					type = citizenship_slavery
					country = prevprev
					cooldown = yes
				}
			}
			else_if = {
				limit = { former_citizenship_type = citizenship_purge }
				set_citizenship_type = {
					type = citizenship_purge
					country = prevprev
					cooldown = yes
				}
			}
			else = {
				if = {
					limit = { prevprev = { is_xenophobe = no } }
					set_citizenship_type = {
						type = citizenship_full
						country = prevprev
						cooldown = yes
					}
				}
				else = {
					set_citizenship_type = {
						type = citizenship_limited
						country = prevprev
						cooldown = yes
					}
				}
			}
		}
	}
}

# this = country, liberated
# root = country, liberator
force_policy_outlaw_robots_and_ai_effect = {
	optimize_memory
	if = {
		limit = { is_gestalt = no }
		add_modifier = {
			modifier = recently_liberated_outlaw_robots_and_ai
			years = @lost_robot_policy_war_flag_duration_years
		}
	}
	set_timed_country_flag = {
		flag = lost_robot_policy_war
		years = @lost_robot_policy_war_flag_duration_years
	}
	set_policies_robot_pops_and_ai_to_outlawed = yes
	force_disable_tech_ascension_special_projects = yes
	country_event = {
		id = civic_organic_zealots.7
		days = @lost_robot_policy_war_flag_duration_days
	}
	deactivate_ongoing_tech_assimilation = yes
}

# this = country, liberated loser
force_policy_ruler_abdicates_effect = {
	optimize_memory
	if = {
		limit = {
			is_ai = yes
			OR = {
				has_origin = origin_legendary_leader
				has_origin = origin_legendary_leader_imperial
				has_origin = origin_legendary_leader_dictatorial
			}
		}
		random_owned_leader = {
			limit = { is_ruler = yes }
			kill_leader = { show_notification = yes }
		}
		set_origin = origin_legendary_leader_death
	}
	if = {
		limit = { is_gestalt = no }
		# instead of killing the old ruler, the built-in Impose Ideology wargoal removes the leader from power but keeps them as an owned leader,
		# then a new leader (installed by the "liberating" country) is created to immediately take their place (no elections)
		create_leader = {
			class = random_ruler
			species = owner_species
			effect = {
				# reuse the existing logic that weights the class of a new heir
				leader_event = {
					id = action.504
				}
				# you don't get to keep the imperial trait if you aren't imperial
				if = {
					limit = {
						has_trait = trait_imperial_heir
						owner = { NOT = { has_authority = auth_imperial } }
					}
					remove_trait = trait_imperial_heir 
				}
				randomize_background_ethic_from_victor = yes
				save_event_target_as = puppet_ruler
			}
		}
		assign_leader = event_target:puppet_ruler
		# heir takes over for imperial, if there is one (puppet_ruler still needed to force the old ruler out of office)
		if = {
			limit = {
				has_authority = auth_imperial
				exists = heir
			}
			event_target:puppet_ruler = { kill_leader = { show_notification = no } }
		}
	}
}

# this = country, liberated/subject of liberated
# root = counter, liberator
force_policy_liberation_effect = {
	optimize_memory
	if = {
		limit = { has_rival = root }
		end_rivalry = root
	}
	add_opinion_modifier = {
		modifier = opinion_liberated_us
		who = root
	}
	root = {
		if = {
			limit = { has_rival = prev }
			end_rivalry = prev
		}
		add_opinion_modifier = {
			modifier = opinion_we_liberated
			who = prev
		}
		force_policy_liberator_effect = { IS_VICTORY = $IS_VICTORY$ }
	}
}

# sorry this is a relative-scoped nightmare
# this effect helps all the liberator's subjects/federation allies know they liberated the target country/one of the target's subjects
# (and the target/subject to know by whom they were liberated) - effectively an m:n join
# this = country, liberator
# prev = country, liberated/subject of liberated
force_policy_liberator_effect = {
	optimize_memory
	if = {
		limit = { is_overlord = yes }
		every_subject = {
			limit = {
				is_robot_empire = no
				any_war = {
					is_war_participant = {
						who = prev
						side = prevprev
					}
				}
			}
			prevprev = {
				if = {
					limit = { has_rival = prev }
					end_rivalry = prev
				}
				add_opinion_modifier = {
					modifier = opinion_liberated_us
					who = prev
				}
			}
			if = {
				limit = { has_rival = prevprev }
				end_rivalry = prevprev
			}
			add_opinion_modifier = {
				modifier = opinion_we_liberated
				who = prevprev
			}
		}
	}
	if = {
		limit = { has_federation = yes }
		every_federation_ally = {
			limit = {
				is_robot_empire = no
				any_war = {
					is_war_participant = {
						who = prev
						side = prevprev
					}
				}
			}
			prevprev = {
				[[IS_VICTORY] end_rivalry = prev ]
				add_opinion_modifier = {
					modifier = opinion_liberated_us
					who = prev
				}
			}
			[[IS_VICTORY] end_rivalry = prevprev ]
			add_opinion_modifier = {
				modifier = opinion_we_liberated
				who = prevprev
			}
		}
	}
}

# this = leader
add_leader_trait_mentat = {
	optimize_memory
	if = {
		limit = {
			NOT = { has_trait = leader_trait_cyborg }
			species = {
				is_robotic = no
				NOT = { has_trait = trait_cybernetic }
			}
			owner = { has_technology = tech_mentat_computation }
		}
		add_trait_no_notify = leader_trait_mentat
	}
}

# this = species, target
# prev = species, current
# prevprev = country, assimilator
coz_set_assimilation_flags = {
	optimize_memory
	set_timed_species_flag = {
		flag = assimilation_species_of_species@prev
		days = 30
	}
	set_timed_species_flag = {
		flag = assimilation_species_of_empire@prevprev
		days = 30
	}
	set_timed_species_flag = {
		flag = uncyborg_species_of_empire@prevprev
		days = 30
	}
}

# set up a species for cybernetic deassimilation, saved as event_target:prepared_species
# this = species
# prev = country, assimilator
coz_prepare_uncyborg_species = {
	optimize_memory
	save_event_target_as = uncyborg_species
	try_swap_species_traits_cyborg_to_organic = yes
	modify_species = {
		species = event_target:uncyborg_species
		remove_trait = trait_self_modified
		remove_trait = trait_cybernetic
		# these traits have no biological equivalents - lose 'em with no replacements
		remove_trait = trait_cyborg_efficient_processors
		remove_trait = trait_cyborg_loyalty_circuits
		remove_trait = trait_cyborg_power_intensive
		change_scoped_species = no
		effect = {
			save_event_target_as = prepared_species
		}
	}
}

# this = species, the (original) species to inspect for traits to convert to non-cybernetic traits to event_target:uncyborg_species
# event_target:uncyborg_species = species, used as the base species to be modified, will be overwritten with the new species if one or more traits are added
try_swap_species_traits_cyborg_to_organic = {
	optimize_memory
	if = {
		limit = { has_trait = trait_cyborg_harvesters }
		modify_species = {
			species = event_target:uncyborg_species
			remove_trait = trait_cyborg_harvesters
			add_trait = trait_agrarian
			change_scoped_species = no
			effect = {
				save_event_target_as = uncyborg_species
			}
		}
	}
	if = {
		limit = { has_trait = trait_cyborg_superconductive }
		modify_species = {
			species = event_target:uncyborg_species
			remove_trait = trait_cyborg_superconductive
			add_trait = trait_ingenious
			change_scoped_species = no
			effect = {
				save_event_target_as = uncyborg_species
			}
		}
	}
	if = {
		limit = { has_trait = trait_cyborg_power_drills }
		modify_species = {
			species = event_target:uncyborg_species
			remove_trait = trait_cyborg_power_drills
			add_trait = trait_industrious
			change_scoped_species = no
			effect = {
				save_event_target_as = uncyborg_species
			}
		}
	}
	if = {
		limit = { has_trait = trait_cyborg_logic_engines }
		modify_species = {
			species = event_target:uncyborg_species
			remove_trait = trait_cyborg_logic_engines
			add_trait = trait_intelligent
			change_scoped_species = no
			effect = {
				save_event_target_as = uncyborg_species
			}
		}
	}
	if = {
		limit = { has_trait = trait_cyborg_trading_algorithms }
		modify_species = {
			species = event_target:uncyborg_species
			remove_trait = trait_cyborg_trading_algorithms
			add_trait = trait_thrifty
			change_scoped_species = no
			effect = {
				save_event_target_as = uncyborg_species
			}
		}
	}
	if = {
		limit = { has_trait = trait_cyborg_durable }
		modify_species = {
			species = event_target:uncyborg_species
			remove_trait = trait_cyborg_durable
			add_trait = trait_conservational
			change_scoped_species = no
			effect = {
				save_event_target_as = uncyborg_species
			}
		}
	}
	if = {
		limit = { has_trait = trait_cyborg_high_maintenance }
		modify_species = {
			species = event_target:uncyborg_species
			remove_trait = trait_cyborg_high_maintenance
			add_trait = trait_wasteful
			change_scoped_species = no
			effect = {
				save_event_target_as = uncyborg_species
			}
		}
	}
	if = {
		limit = { has_trait = trait_cyborg_enhanced_memory }
		modify_species = {
			species = event_target:uncyborg_species
			remove_trait = trait_cyborg_enhanced_memory
			add_trait = trait_talented
			change_scoped_species = no
			effect = {
				save_event_target_as = uncyborg_species
			}
		}
	}
	if = {
		limit = { has_trait = trait_cyborg_learning_algorithms }
		modify_species = {
			species = event_target:uncyborg_species
			remove_trait = trait_cyborg_learning_algorithms
			add_trait = trait_quick_learners
			change_scoped_species = no
			effect = {
				save_event_target_as = uncyborg_species
			}
		}
	}
	if = {
		limit = { has_trait = trait_cyborg_neural_limiters }
		modify_species = {
			species = event_target:uncyborg_species
			remove_trait = trait_cyborg_neural_limiters
			add_trait = trait_slow_learners
			change_scoped_species = no
			effect = {
				save_event_target_as = uncyborg_species
			}
		}
	}
	if = {
		limit = { has_trait = trait_cyborg_streamlined_protocols }
		modify_species = {
			species = event_target:uncyborg_species
			remove_trait = trait_cyborg_streamlined_protocols
			add_trait = trait_docile
			change_scoped_species = no
			effect = {
				save_event_target_as = uncyborg_species
			}
		}
	}
	if = {
		limit = { has_trait = trait_cyborg_high_bandwidth }
		modify_species = {
			species = event_target:uncyborg_species
			remove_trait = trait_cyborg_high_bandwidth
			add_trait = trait_unruly
			change_scoped_species = no
			effect = {
				save_event_target_as = uncyborg_species
			}
		}
	}
	if = {
		limit = { has_trait = trait_cyborg_double_jointed }
		modify_species = {
			species = event_target:uncyborg_species
			remove_trait = trait_cyborg_double_jointed
			add_trait = trait_communal
			change_scoped_species = no
			effect = {
				save_event_target_as = uncyborg_species
			}
		}
	}
	if = {
		limit = { has_trait = trait_cyborg_bulky }
		modify_species = {
			species = event_target:uncyborg_species
			remove_trait = trait_cyborg_bulky
			add_trait = trait_solitary
			change_scoped_species = no
			effect = {
				save_event_target_as = uncyborg_species
			}
		}
	}
}

# randomize the leader's background ethic, weighted based on the ethos of the war victor
# this = leader
# root = country, victor
randomize_background_ethic_from_victor = {
	optimize_memory
	random_list = {
		1 = {
			modifier = {
				factor = 2
				root = { has_ethic = ethic_fanatic_militarist }
			}
			modifier = {
				factor = 0
				root = { is_militarist = no }
			}
			change_background_ethic = ethic_militarist
		}
		1 = {
			modifier = {
				factor = 2
				root = { has_ethic = ethic_fanatic_xenophobe }
			}
			modifier = {
				factor = 0
				root = { is_xenophobe = no }
			}
			change_background_ethic = ethic_xenophobe
		}
		1 = {
			modifier = {
				factor = 2
				root = { has_ethic = ethic_fanatic_egalitarian }
			}
			modifier = {
				factor = 0
				root = { is_egalitarian = no }
			}
			change_background_ethic = ethic_egalitarian
		}
		1 = {
			modifier = {
				factor = 2
				root = { has_ethic = ethic_fanatic_materialist }
			}
			modifier = {
				factor = 0
				root = { is_materialist = no }
			}
			change_background_ethic = ethic_materialist
		}
		1 = {
			modifier = {
				factor = 2
				root = { has_ethic = ethic_fanatic_pacifist }
			}
			modifier = {
				factor = 0
				root = { is_pacifist = no }
			}
			change_background_ethic = ethic_pacifist
		}
		1 = {
			modifier = {
				factor = 2
				root = { has_ethic = ethic_fanatic_xenophile }
			}
			modifier = {
				factor = 0
				root = { is_xenophile = no }
			}
			change_background_ethic = ethic_xenophile
		}
		1 = {
			modifier = {
				factor = 2
				root = { has_ethic = ethic_fanatic_authoritarian }
			}
			modifier = {
				factor = 0
				root = { is_authoritarian = no }
			}
			change_background_ethic = ethic_authoritarian
		}
		1 = {
			modifier = {
				factor = 2
				root = { has_ethic = ethic_fanatic_spiritualist }
			}
			modifier = {
				factor = 0
				root = { is_spiritualist = no }
			}
			change_background_ethic = ethic_spiritualist
		}
	}
}