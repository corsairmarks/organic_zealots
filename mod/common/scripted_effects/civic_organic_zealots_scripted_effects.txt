# this = country
set_policies_robot_pops_and_ai_to_outlawed = {
	optimize_memory
	if = {
		limit = {
			NOT = { has_policy_flag = ai_outlawed }
			can_set_ai_policy = yes
			can_set_policy = {
				policy = artificial_intelligence_policy
				option = ai_outlawed
			}
		}
		set_policy = {
			policy = artificial_intelligence_policy
			option = ai_outlawed
			cooldown = yes
		}
	}
	if = {
		limit = {
			NOT = { has_policy_flag = robots_outlawed }
			is_gestalt = no # matches the potential block for robot_pop_policy
			can_set_policy = {
				policy = robot_pop_policy
				option = robot_pops_outlawed
			}
		}
		set_policy = {
			policy = robot_pop_policy
			option = robot_pops_outlawed
			cooldown = yes
		}
	}
}

# this = country
force_disable_tech_ascension_special_projects = {
	optimize_memory
	if = {
		limit = {
			has_tradition = tr_cybernetics_adopt
			NOT = { has_country_flag = cyborg_empire }
			OR = {
				has_special_project = FLESH_IS_WEAK_PROJECT
				is_researching_special_project = FLESH_IS_WEAK_PROJECT
			}
		}
		abort_special_project = { type = FLESH_IS_WEAK_PROJECT }
		set_country_flag = flesh_is_weak_project_aborted_by_organic_zealots
	}
	if = {
		limit = {
			has_active_tradition = tr_synthetics_synthetic_age
			is_robot_empire = no
			OR = {
				has_special_project = SYNTHETIC_EVOLUTION_PROJECT
				is_researching_special_project = SYNTHETIC_EVOLUTION_PROJECT
			}
		}
		abort_special_project = { type = SYNTHETIC_EVOLUTION_PROJECT }
		set_country_flag = synthetic_evolution_project_aborted_by_organic_zealots
	}
}

# this = country
re_enable_tech_ascension_special_projects_if_force_disabled = {
	optimize_memory
	if ={
		limit = {
			has_tradition = tr_cybernetics_adopt
			has_country_flag = flesh_is_weak_project_aborted_by_organic_zealots
			NOR = {
				has_country_flag = cyborg_empire
				has_special_project = FLESH_IS_WEAK_PROJECT
				is_researching_special_project = FLESH_IS_WEAK_PROJECT
			}
		}
		save_event_target_as = flesh_weak_owner # required so the project has its expected event_target
		enable_special_project = {
			name = FLESH_IS_WEAK_PROJECT
			owner = this
			location = capital_scope
		}
		remove_country_flag = flesh_is_weak_project_aborted_by_organic_zealots
	}
	if ={
		limit = {
			has_active_tradition = tr_synthetics_synthetic_age
			has_country_flag = synthetic_evolution_project_aborted_by_organic_zealots
			is_robot_empire = no
			NOR = {
				has_special_project = SYNTHETIC_EVOLUTION_PROJECT
				is_researching_special_project = SYNTHETIC_EVOLUTION_PROJECT
			}
		}
		save_event_target_as = synth_evo_owner # required so the project has its expected event_target
		enable_special_project = {
			name = SYNTHETIC_EVOLUTION_PROJECT
			owner = this
			location = capital_scope
		}
		remove_country_flag = synthetic_evolution_project_aborted_by_organic_zealots
	}
}

# this = country
deactivate_ongoing_tech_assimilation = {
	optimize_memory
	every_owned_pop_species = {
		limit = {
			has_citizenship_type = {
				type = citizenship_assimilation
				country = prev
			}
			OR = {
				has_living_standard = {
					type = living_standard_cyborg_ego_assimilation
					country = prev
				}
				has_living_standard = {
					type = living_standard_cyborg_ego_assimilation_psionic
					country = prev
				}
				has_living_standard = {
					type = living_standard_cyborg_assimilation
					country = prev
				}
				has_living_standard = {
					type = living_standard_cyborg_assimilation_psionic
					country = prev
				}
				has_living_standard = {
					type = living_standard_tech_assimilation
					country = prev
				}
			}
		}
		every_species_pop = {
			limit = { is_owned_by = prevprev }
			# former_citizenship_type is not eligible to use with a switch
			if = {
				limit = { former_citizenship_type = citizenship_full }
				set_citizenship_type = {
					type = citizenship_full
					country = prevprev
					cooldown = yes
				}
			}
			else_if = {
				limit = { former_citizenship_type = citizenship_limited }
				set_citizenship_type = {
					type = citizenship_limited
					country = prevprev
					cooldown = yes
				}
			}
			else_if = {
				limit = { former_citizenship_type = citizenship_slavery }
				set_citizenship_type = {
					type = citizenship_slavery
					country = prevprev
					cooldown = yes
				}
			}
			else_if = {
				limit = { former_citizenship_type = citizenship_purge }
				set_citizenship_type = {
					type = citizenship_purge
					country = prevprev
					cooldown = yes
				}
			}
			else = {
				if = {
					limit = { prevprev = { is_xenophobe = no } }
					set_citizenship_type = {
						type = citizenship_full
						country = prevprev
						cooldown = yes
					}
				}
				else = {
					set_citizenship_type = {
						type = citizenship_limited
						country = prevprev
						cooldown = yes
					}
				}
			}
		}
	}
}

# this = country (loser)
# root = country (winner)
force_policy_outlaw_robots_and_ai_effect = {
	optimize_memory
	add_modifier = {
		modifier = recently_liberated
		years = @lost_robot_policy_war_flag_duration_years
	}
	add_opinion_modifier = {
		modifier = opinion_liberated_us
		who = root
	}
	root = {
		add_opinion_modifier = {
			modifier = opinion_we_liberated
			who = prev
		}
	}
	set_timed_country_flag = {
		flag = lost_robot_policy_war
		years = @lost_robot_policy_war_flag_duration_years
	}
	set_policies_robot_pops_and_ai_to_outlawed = yes
	force_disable_tech_ascension_special_projects = yes
	country_event = {
		id = civic_organic_zealots.7
		days = @lost_robot_policy_war_flag_duration_days
	}
	deactivate_ongoing_tech_assimilation = yes
}

# this = country (loser)
force_policy_outlaw_robots_and_ai_ruler_abdicates_effect = {
	optimize_memory
	if = {
		limit = { exists = ruler }
		ruler = {
			kill_leader = {
				show_notification = yes
				fire = yes
			}
		}
	}
}

# this = country (loser)
# root = counter (winner)
force_policy_liberation_effect = {
	optimize_memory
	every_country = {
		limit = {
			OR = {
				is_in_federation_with = root
				AND = {
					is_subject = yes
					exists = overlord
					overlord = { is_same_value = root }
					any_war = {
						is_war_participant = {
							who = prev
							side = root
						}
					}
				}
			}
		}
		add_opinion_modifier = {
			modifier = opinion_we_liberated
			who = prev
		}
		prev = {
			add_opinion_modifier = {
				modifier = opinion_liberated_us
				who = prevprev
			}
		}
	}
}

# this = leader
add_leader_trait_mentat = {
	optimize_memory
	if = {
		limit = {
			NOR = {
				has_trait = leader_trait_admiral_cyborg
				has_trait = leader_trait_general_cyborg
				has_trait = leader_trait_governor_cyborg
				has_trait = leader_trait_scientist_cyborg
				has_trait = leader_trait_ruler_cyborg
				has_ruler_trait = leader_trait_ruler_cyborg
			}
			species = {
				is_robotic = no
				NOT = { has_trait = trait_cybernetic }
			}
			owner = { has_technology = tech_mentat_computation }
		}
		switch = {
			trigger = leader_class
			governor = {
				if = {
					limit = { NOT = { has_trait = leader_trait_governor_mentat } }
					add_trait = leader_trait_governor_mentat
				}
			}
			scientist = {
				if = {
					limit = { NOT = { has_trait = leader_trait_scientist_mentat } }
					add_trait = leader_trait_scientist_mentat
				}
			}
			ruler = {
				if = {
					limit = { NOT = { has_trait = leader_trait_ruler_mentat } }
					add_trait = leader_trait_ruler_mentat
				}
			}
		}
		if = {
			limit = { NOT = { has_ruler_trait = leader_trait_ruler_mentat } }
			add_ruler_trait = leader_trait_ruler_mentat
		}
	}
}

# this = species (target)
# prev = species (current)
# prevprev = country (assimilator)
coz_set_assimilation_flags = {
	optimize_memory
	set_timed_species_flag = {
		flag = assimilation_species_of_species@prev
		days = 30
	}
	set_timed_species_flag = {
		flag = assimilation_species_of_empire@prevprev
		days = 30
	}
}

# set up a species for cybernetic deassimilation
# this = species
# prev = country (assimilator)
coz_prepare_uncyborg_species = {
	optimize_memory
	save_event_target_as = uncyborg_species
	try_swap_species_traits_cyborg_to_organic = yes
	modify_species = {
		species = event_target:uncyborg_species
		remove_trait = trait_self_modified
		remove_trait = trait_cybernetic
		# these traits have no biological equivalents - lose 'em with no replacements
		remove_trait = trait_cyborg_efficient_processors
		remove_trait = trait_cyborg_loyalty_circuits
		remove_trait = trait_cyborg_power_intensive
		change_scoped_species = no
		effect = {
			coz_set_assimilation_flags = yes
			save_event_target_as = prepared_species
		}
	}
}

# species = the (original) species to inspect for traits to convert to non-cybernetic traits to event_target:uncyborg_species
# event_target:uncyborg_species = used as the base species to be modified, will be overwritten with the new species if one or more traits are added
try_swap_species_traits_cyborg_to_organic = {
	optimize_memory
	if = {
		limit = { has_trait = trait_cyborg_harvesters }
		modify_species = {
			species = event_target:uncyborg_species
			remove_trait = trait_cyborg_harvesters
			add_trait = trait_agrarian
			change_scoped_species = no
			effect = {
				save_event_target_as = uncyborg_species
			}
		}
	}
	if = {
		limit = { has_trait = trait_cyborg_superconductive }
		modify_species = {
			species = event_target:uncyborg_species
			remove_trait = trait_cyborg_superconductive
			add_trait = trait_ingenious
			change_scoped_species = no
			effect = {
				save_event_target_as = uncyborg_species
			}
		}
	}
	if = {
		limit = { has_trait = trait_cyborg_power_drills }
		modify_species = {
			species = event_target:uncyborg_species
			remove_trait = trait_cyborg_power_drills
			add_trait = trait_industrious
			change_scoped_species = no
			effect = {
				save_event_target_as = uncyborg_species
			}
		}
	}
	if = {
		limit = { has_trait = trait_cyborg_logic_engines }
		modify_species = {
			species = event_target:uncyborg_species
			remove_trait = trait_cyborg_logic_engines
			add_trait = trait_intelligent
			change_scoped_species = no
			effect = {
				save_event_target_as = uncyborg_species
			}
		}
	}
	if = {
		limit = { has_trait = trait_cyborg_trading_algorithms }
		modify_species = {
			species = event_target:uncyborg_species
			remove_trait = trait_cyborg_trading_algorithms
			add_trait = trait_thrifty
			change_scoped_species = no
			effect = {
				save_event_target_as = uncyborg_species
			}
		}
	}
	if = {
		limit = { has_trait = trait_cyborg_durable }
		modify_species = {
			species = event_target:uncyborg_species
			remove_trait = trait_cyborg_durable
			add_trait = trait_conservational
			change_scoped_species = no
			effect = {
				save_event_target_as = uncyborg_species
			}
		}
	}
	if = {
		limit = { has_trait = trait_cyborg_high_maintenance }
		modify_species = {
			species = event_target:uncyborg_species
			remove_trait = trait_cyborg_high_maintenance
			add_trait = trait_wasteful
			change_scoped_species = no
			effect = {
				save_event_target_as = uncyborg_species
			}
		}
	}
	if = {
		limit = { has_trait = trait_cyborg_enhanced_memory }
		modify_species = {
			species = event_target:uncyborg_species
			remove_trait = trait_cyborg_enhanced_memory
			add_trait = trait_talented
			change_scoped_species = no
			effect = {
				save_event_target_as = uncyborg_species
			}
		}
	}
	if = {
		limit = { has_trait = trait_cyborg_learning_algorithms }
		modify_species = {
			species = event_target:uncyborg_species
			remove_trait = trait_cyborg_learning_algorithms
			add_trait = trait_quick_learners
			change_scoped_species = no
			effect = {
				save_event_target_as = uncyborg_species
			}
		}
	}
	if = {
		limit = { has_trait = trait_cyborg_neural_limiters }
		modify_species = {
			species = event_target:uncyborg_species
			remove_trait = trait_cyborg_neural_limiters
			add_trait = trait_slow_learners
			change_scoped_species = no
			effect = {
				save_event_target_as = uncyborg_species
			}
		}
	}
	if = {
		limit = { has_trait = trait_cyborg_streamlined_protocols }
		modify_species = {
			species = event_target:uncyborg_species
			remove_trait = trait_cyborg_streamlined_protocols
			add_trait = trait_docile
			change_scoped_species = no
			effect = {
				save_event_target_as = uncyborg_species
			}
		}
	}
	if = {
		limit = { has_trait = trait_cyborg_high_bandwidth }
		modify_species = {
			species = event_target:uncyborg_species
			remove_trait = trait_cyborg_high_bandwidth
			add_trait = trait_unruly
			change_scoped_species = no
			effect = {
				save_event_target_as = uncyborg_species
			}
		}
	}
	if = {
		limit = { has_trait = trait_cyborg_double_jointed }
		modify_species = {
			species = event_target:uncyborg_species
			remove_trait = trait_cyborg_double_jointed
			add_trait = trait_communal
			change_scoped_species = no
			effect = {
				save_event_target_as = uncyborg_species
			}
		}
	}
	if = {
		limit = { has_trait = trait_cyborg_bulky }
		modify_species = {
			species = event_target:uncyborg_species
			remove_trait = trait_cyborg_bulky
			add_trait = trait_solitary
			change_scoped_species = no
			effect = {
				save_event_target_as = uncyborg_species
			}
		}
	}
}