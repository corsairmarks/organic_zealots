# Modified: added civic_organic_zealots
# this = country
is_homicidal = {
	OR = {
		has_valid_civic = civic_fanatic_purifiers
		is_valid_organic_zealots = yes
		has_valid_civic = civic_machine_terminator
		has_valid_civic = civic_hive_devouring_swarm
	}
}

# Modified: calls is_homicidal instead of duplicating
# this = country
is_unfriendly = {
	OR = {
		has_valid_civic = civic_barbaric_despoilers
		is_homicidal = yes
	}
}

# Modified: use triggers, include conditions for civic_organic_zealots
# this = country, attacker
# from = country, defender
has_total_war_cb = {
	OR = {
		# attacker checks
		AND = {
			OR = {
				is_country_type = default
				is_fallen_empire = yes
			}
			OR = {
				is_country_type = awakened_fallen_empire
				has_valid_civic = civic_hive_devouring_swarm
				has_valid_civic = civic_machine_assimilator
				AND = {
					has_valid_civic = civic_machine_terminator
					from = { is_robot_empire = no }
				}
				AND = {
					is_valid_organic_zealots = yes
					from = {
						OR = {
							is_robot_empire = yes
							is_fallen_empire_machine = yes
						}
					}
				}
				AND = {
					has_valid_civic = civic_fanatic_purifiers
					NOT = { is_same_species = from }
				}
			}
		}
		# end threat checks
		AND = {
			is_country_type = default
			NOR = {
				is_country_type = awakened_fallen_empire
				has_valid_civic = civic_machine_assimilator
			}
			is_homicidal = no
			from = {
				OR = {
					is_country_type = awakened_fallen_empire
					has_valid_civic = civic_machine_assimilator
					is_homicidal = yes
				}
			}
		}
		AND = {
			is_valid_organic_zealots = yes
			from = {
				OR = {
					is_country_type = awakened_fallen_empire
					has_valid_civic = civic_machine_assimilator
					AND = {
						is_valid_organic_zealots = no
						is_homicidal = yes
					}
				}
			}
		}
	}
}

# Modified: use is_gestalt trigger, use is_homicidal trigger
# this = country
allows_purge = {
	OR = {
		is_gestalt = yes
		is_homicidal = yes
		has_policy_flag = purge_allowed
		has_policy_flag = purge_displacement_only
	}
}

# Modified: use gestalt trigger and homicidal trigger
# this = country
is_valid_target_fe_stop_atrocities = {
	OR = {
		allows_slavery = yes
		allows_purge = yes
	}
	is_gestalt = no
	is_homicidal = no
}

# Modified: use gestalt trigger and homicidal trigger
# this = fleet
is_merc_enclave_founding_allowed = {
	owner = {
		is_gestalt = no
		is_homicidal = no
	}
	custom_tooltip = {
		fail_text = enclave.2.tooltip.a
		success_text = enclave.2.tooltip.aa
		exists = owner
		exists = leader
		is_ship_class = shipclass_military
	}
	fleet_size >= 50
	custom_tooltip = {
		fail_text = enclave.2.tooltip.cloak
		count_owned_ship = {
			limit = { has_cloaking_strength > 0 }
			count = 0
		}
	}
	custom_tooltip = {
		fail_text = enclave.2.tooltip.c
		success_text = enclave.2.tooltip.cc
		exists = solar_system
		solar_system = {
			exists = owner
			owner = {
				is_same_value = root.owner
				is_same_value = root.controller
			}
			NOT = {
				any_fleet_in_system = {
					owner = {
						is_hostile = root.owner
					}
				}
			}
		}
	}
	custom_tooltip = {
		fail_text = enclave.2.tooltip.b
		success_text = enclave.2.tooltip.bb
		solar_system = {
			NOR = {
				any_fleet_in_system = {
					is_ship_size = enclave_mercenary_station
				}
				has_star_flag = enclave
			}
		}
	}
	custom_tooltip = {
		fail_text = enclave.2.tooltip.e
		success_text = enclave.2.tooltip.ee
		solar_system = {
			OR = {
				any_system_planet = {
					is_moon = yes
				}
				any_system_planet = {
					is_asteroid = yes
				}
			}
		}
	}
	custom_tooltip = {
		fail_text = enclave.2.tooltip.d
		success_text = enclave.2.tooltip.dd
		controller = {
			enclave_capacity_left >= 1
		}
	}
	custom_tooltip = {
		fail_text = enclave.2.tooltip.f
		NOR = {
			has_ship_owner_type = federation
			has_ship_owner_type = galactic_community
		}
	}
}

# Modified: can be prevented by losing a robot policy war or having an organic zealot overlord
# this = pop
can_assemble_cyborg_pop = {
	hidden_trigger  ={ exists = owner }
	owner = {
		custom_tooltip = {
			fail_text = lost_robot_policy_war_fail
			NOT = { has_country_flag = lost_robot_policy_war }
		}
		custom_tooltip = {
			fail_text = civic_tooltip_not_organic_zealots_fail
			is_valid_organic_zealots = no
		}
		custom_tooltip = {
			fail_text = civic_tooltip_overlord_not_organic_zealots_fail
			NAND = {
				is_subject = yes
				overlord = { is_valid_organic_zealots = yes }
			}
		}
	}
	hidden_trigger = { exists = planet }
	planet = {
		OR = {
			NOT = { exists = assembling_species }
			AND = {
				exists = assembling_species
				assembling_species = {
					OR = {
						has_trait = trait_cybernetic
						is_robotic = yes
					}
				}
			}
		}
	}
}

# Modified: can be prevented by losing a robot policy war or having an organic zealot overlord
# this = pop
can_assemble_robot = {
	hidden_trigger = { exists = owner }
	owner = {
		custom_tooltip = {
			fail_text = lost_robot_policy_war_fail
			NOT = { has_country_flag = lost_robot_policy_war }
		}
		custom_tooltip = {
			fail_text = civic_tooltip_not_organic_zealots_fail
			is_valid_organic_zealots = no
		}
		custom_tooltip = {
			fail_text = civic_tooltip_overlord_not_organic_zealots_fail
			NAND = {
				is_subject = yes
				overlord = { is_valid_organic_zealots = yes }
			}
		}
	}
	hidden_trigger = { exists = planet }
	planet = {
		OR = {
			NOT = { exists = assembling_species }
			AND = {
				exists = assembling_species
				assembling_species = { is_robotic = yes }
			}
		}
	}
}

# Modified: can be prevented by losing a robot policy war or having an organic zealot overlord
# this = species
# from = country, owner
can_add_cybernetic_traits = {
	hidden_trigger = { exists = from }
	from = {
		custom_tooltip = {
			fail_text = lost_robot_policy_war_fail
			NOT = { has_country_flag = lost_robot_policy_war }
		}
		custom_tooltip = {
			fail_text = civic_tooltip_not_organic_zealots_fail
			is_valid_organic_zealots = no
		}
		custom_tooltip = {
			fail_text = civic_tooltip_overlord_not_organic_zealots_fail
			NAND = {
				is_subject = yes
				overlord = { is_valid_organic_zealots = yes }
			}
		}
		OR = {
			has_tradition = tr_cybernetics_integrated_anatomy
			has_tradition = tr_cybernetics_assimilator_integrated_anatomy
		}
	}
	has_trait = trait_cybernetic
}