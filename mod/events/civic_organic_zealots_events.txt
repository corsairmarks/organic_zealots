namespace = civic_organic_zealots

# triggered by on_yearly_pulse_country
# intended to trigger after action.64
country_event = {
	id = civic_organic_zealots.1
	is_triggered_only = yes
	hide_window = yes
	trigger = {
		num_unique_species > 1
		any_owned_leader = {
			species = {
				has_species_flag = assimilation_species_of_empire@root
				has_species_flag = uncyborg_species_of_empire@root
			}
		}
	}
	immediate = {
		every_owned_leader = {
			limit = {
				species = {
					has_species_flag = assimilation_species_of_empire@root
					has_species_flag = uncyborg_species_of_empire@root
				}
			}
			fire_on_action = { on_action = on_leader_species_changed }
		}
	}
}

# triggered by empire_init_add_technologies
country_event = {
	id = civic_organic_zealots.2
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		is_valid_organic_zealots = yes
	}
	immediate = {
		give_technology = {
			tech = tech_genome_mapping
			message = no
		}
		give_technology = {
			tech = tech_cloning
			message = no
		}
	}
}

# triggered by on_pop_purged
# this = planet
# from = country
# fromfrom = pop
planet_event = {
	id = civic_organic_zealots.3
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		exists = from
		from = { is_valid_organic_zealots = yes }
		is_controlled_by = from
		exists = fromfrom
		fromfrom = { is_robot_pop = yes }
	}
	immediate = {
		from = {
			add_monthly_resource_mult = {
				resource = unity
				value = 2
				min = 5
				max = 100
			}
		}
	}
}

# triggered by on_becoming_subject
# this = country, subject
# from = country, overlord
country_event = {
	id = civic_organic_zealots.4
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		exists = from
		from = { is_valid_organic_zealots = yes }
		OR = {
			AND = {
				has_tradition = tr_cybernetics_adopt
				NOT = { has_country_flag = cyborg_empire }
			}
			AND = {
				has_active_tradition = tr_synthetics_synthetic_age
				is_robot_empire = no
			}
		}
	}
	immediate = {
		force_disable_tech_ascension_special_projects = yes
	}
}

# triggered by on_becoming_subject
# this = country, subject
# from = country, overlord
country_event = {
	id = civic_organic_zealots.5
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		exists = from
		from = { is_valid_organic_zealots = yes }
		OR = {
			has_active_tradition = tr_cybernetics_transubstantiation_synthesis
			is_robot_empire = yes
		}
	}
	immediate = {
		deactivate_ongoing_tech_assimilation = yes
	}
}

# triggered by on_becoming_subject
# this = country, subject
# from = country, overlord
country_event = {
	id = civic_organic_zealots.6
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		exists = from
		from = { is_valid_organic_zealots = yes }
		is_valid_target_to_outlaw_cybernetics_or_robot_pops_or_ai = yes
	}
	immediate = {
		set_policies_robot_pops_and_ai_to_outlawed = yes
	}
}

# triggered by force_policy_outlaw_robots_and_ai_effect after the force-policy duration expires
# this = country, who was forcefully disabled
country_event = {
	id = civic_organic_zealots.7
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		OR = {
			has_country_flag = flesh_is_weak_project_aborted_by_organic_zealots
			has_country_flag = synthetic_evolution_project_aborted_by_organic_zealots
		}
		NAND = {
			is_subject = yes
			# intentionally does NOT check civic validity
			overlord = { is_organic_zealots = yes }
		}
	}
	immediate = {
		re_enable_tech_ascension_special_projects_if_force_disabled = yes
	}
}

# triggered by empire_init_capital_planet
# this = planet, capital
# from = species, founder
planet_event = {
	id = civic_organic_zealots.8
	hide_window = yes
	is_triggered_only = yes
	pre_triggers = {
		has_owner = yes
	}
	trigger = {
		owner = { is_valid_organic_zealots = yes }
		free_building_slots > 0
	}
	immediate = {
		add_building = building_clone_birth_labs
	}
}

# automatically set the policy for capacity boosters when discovered, if possible
# CM: this isn't directly to Civic: Organic Zealots, but I'm tired of forgetting to switch the policy when I research the better leader technology
# triggered by on_tech_increased
# root = country
country_event = {
	id = civic_organic_zealots.9
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		last_increased_tech = tech_capacity_boosters
		has_policy_flag = leader_enhancement_selected_lineages
		can_set_policy = {
			policy = leader_enhancement
			option = leader_enhancement_capacity_boosters
		}
	}
	immediate = {
		set_policy = {
			policy = leader_enhancement
			option = leader_enhancement_capacity_boosters
			cooldown = yes
		}
	}
}

# add the mentat 
# triggered by on_tech_increased
# root = country
country_event = {
	id = civic_organic_zealots.10
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		last_increased_tech = tech_mentat_computation
	}
	immediate = {
		every_owned_leader = { add_leader_trait_mentat = yes }
		every_pool_leader = { add_leader_trait_mentat = yes }
	}
}

# new leaders get the mentat leader trait
# triggered by on_leader_spawned
# root = country
# from = leader (spawned)
country_event = {
	id = civic_organic_zealots.11
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_technology = tech_mentat_computation
		exists = from
	}
	immediate = {
		from = { add_leader_trait_mentat = yes }
	}
}

# new leaders for organic zealots have AI assistants replaced with another trait
# triggered by on_leader_spawned
# root = country
# from = leader (spawned)
country_event = {
	id = civic_organic_zealots.12
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		is_valid_organic_zealots = yes
		exists = from
		from = {
			leader_class = scientist
			OR = {
				has_trait = leader_trait_custom_AI_assistant
				has_trait = leader_trait_sapient_AI_assistant
			}
		}
	}
	immediate = {
		from = {
			while = {
				limit = {
					OR = {
						has_trait = leader_trait_custom_AI_assistant
						has_trait = leader_trait_sapient_AI_assistant
					}
				}
				if = {
					limit = { has_trait = leader_trait_custom_AI_assistant }
					remove_trait = leader_trait_custom_AI_assistant
				}
				if = {
					limit = { has_trait = leader_trait_sapient_AI_assistant }
					remove_trait = leader_trait_sapient_AI_assistant
				}
				add_trait_no_notify = random_common
			}
		}
	}
}

# external leaders for organic zealots need to be replaced by non-robotic ones
# triggered by on_leader_spawned
# root = country
# from = leader (spawned)
country_event = {
	id = civic_organic_zealots.13
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		is_valid_organic_zealots = yes
		exists = from
		from = { is_robotic_species = yes }
	}
	immediate = {
		species = { save_event_target_as = leader_prev_species }
		if = {
			limit = {
				exists = creator
				creator = { any_owned_pop_species = { is_robotic = no } }
			}
			creator = {
				random_owned_pop_species = {
					limit = { is_robotic = no }
					save_event_target_as = leader_new_species
				}
			}
		}
		else = {
			random_owned_pop_species = {
				limit = { is_robotic = no }
				save_event_target_as = leader_new_species
			}
		}
		remove_all_traits = yes
		add_trait_no_notify = random_common
		country_event = {
			id = civic_organic_zealots.12
			scopes = {
				from = from
			}
		}
		from = {
			change_species = event_target:leader_new_species
			set_name = random
			fire_on_action = {
				on_action = on_leader_species_changed
				scopes = {
					from = event_target:leader_prev_species
				}
			}
		}
	}
}

# triggered by on_becoming_independent
# root = country, former subject
# from = country, former overlord
country_event = {
	id = civic_organic_zealots.14
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		OR = {
			has_country_flag = flesh_is_weak_project_aborted_by_organic_zealots
			has_country_flag = synthetic_evolution_project_aborted_by_organic_zealots
		}
		OR = {
			NOT = { exists = from }
			from = { is_valid_organic_zealots = yes }
		}
	}
	immediate = {
		re_enable_tech_ascension_special_projects_if_force_disabled = yes
	}
}

# triggered by on_decade_pulse_country
country_event = {
	id = civic_organic_zealots.20
	hide_window = yes
	is_triggered_only = yes
	trigger = { any_playable_country = { is_country = prev } }
	immediate = {
		country_event = {
			id = civic_organic_zealots.21
			random = 360
		}
	}
}

# triggered by civic_organic_zealots.20
country_event = {
	id = civic_organic_zealots.21
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		# triggers checked here instead of civic_organic_zealots.20;
		# countries might research tech_mentat_computation or no longer have mentats by the time this scheduled event fires
		NOT = { has_technology = tech_mentat_computation }
		OR = {
			any_owned_leader = { has_mentat_trait = yes }
			any_envoy = { has_mentat_trait = yes }
		}
	}
	immediate = {
		random_list = {
			80 = {
				modifier = {
					add = 5
					has_active_tradition = tr_harmony_mind_and_body
				}
				modifier = {
					add = 5
					has_policy_flag = leader_enhancement_selected_lineages
				}
				modifier = {
					add = 10
					has_policy_flag = leader_enhancement_capacity_boosters
				}
			}
			20 = {
				modifier = {
					subtract = 5
					has_active_tradition = tr_harmony_mind_and_body
				}
				modifier = {
					subtract = 5
					has_policy_flag = leader_enhancement_selected_lineages
				}
				modifier = {
					subtract = 10
					has_policy_flag = leader_enhancement_capacity_boosters
				}
				reroll_random = yes
				random_list = {
					1 = {
						modifier = {
							multiply = 0
							NOT = { any_owned_leader = { has_mentat_trait = yes } }
						}
						random_owned_leader = {
							limit = { has_mentat_trait = yes }
							weights = {
								base = 1
								modifier = {
									factor = trigger:leader_age
								}
								modifier = {
									factor = 1.25
									is_idle = no
								}
							}
							save_event_target_as = dead_leader
						}
					}
					1 = {
						modifier = {
							multiply = 0
							NOT = { any_envoy = { has_mentat_trait = yes } }
						}
						random_envoy = {
							limit = { has_mentat_trait = yes }
							weights = {
								base = 1
								modifier = {
									factor = trigger:leader_age
								}
								modifier = {
									factor = 1.25
									is_idle = no
								}
							}
							save_event_target_as = dead_leader
						}
					}
				}
				event_target:dead_leader = {
					if = {
						limit = { exists = fleet }
						fleet = { save_event_target_as = dead_leader_location }
						set_leader_flag = leader_location_fleet
					}
					else_if = {
						limit = { exists = sector }
						sector.sector_capital = { save_event_target_as = dead_leader_location }
						set_leader_flag = leader_location_government
					}
					else_if = {
						limit = { leader_class = envoy }
						if = {
							limit = { has_envoy_task = { task = spy_network } }
							set_leader_flag = leader_location_spy
							envoy_location_country.capital_scope = { save_event_target_as = dead_leader_location }
						}
						else_if = {
							limit = {
								OR = {
									has_envoy_task = { task = improve_relations }
									has_envoy_task = { task = harm_relations }
								}
							}
							set_leader_flag = leader_location_diplomacy
							envoy_location_country.capital_scope = { save_event_target_as = dead_leader_location }
						}
						else_if = {
							limit = { has_envoy_task = { task = galactic_community } }
							set_leader_flag = leader_location_galcom
							owner.capital_scope = { save_event_target_as = dead_leader_location }
						}
						else_if = {
							limit = { has_envoy_task = { task = federation } }
							set_leader_flag = leader_location_federation
							owner.federation.federation_leader.capital_scope = { save_event_target_as = dead_leader_location }
						}
						else_if = {
							limit = { has_envoy_task = { task = first_contact } }
							set_leader_flag = leader_location_first_contact
							owner = {
								random_active_first_contact = {
									limit = { leader = { is_same_value = prevprevprev } }
									save_event_target_as = dead_leader_location
								}
							}
						}
						else_if = {
							limit = {
								has_galactic_emperor = yes
								OR = {
									has_envoy_task = { task = strengthen_imperial_authority }
									has_envoy_task = { task = undermine_imperial_authority }
								}
							}
							galactic_emperor.capital_scope = { save_event_target_as = dead_leader_location }
							set_leader_flag = leader_location_imperium
						}
						else = {
							owner.capital_scope = { save_event_target_as = dead_leader_location }
						}
					}
					else = {
						if = {
							limit = { is_ruler = yes }
							if = {
								limit = {
									has_galactic_emperor = yes
									owner = { is_galactic_emperor = yes }
								}
								set_leader_flag = leader_location_imperium
							}
							else = {
								set_leader_flag = leader_location_government
							}
						}
						else_if = {
							limit = { leader_class = scientist }
							if = {
								limit = { is_researching_area = physics }
								set_leader_flag = leader_location_research_physics
							}
							else_if = {
								limit = { is_researching_area = society }
								set_leader_flag = leader_location_research_society
							}
							else_if = {
								limit = { is_researching_area = engineering }
								set_leader_flag = leader_location_research_engineering
							}
						}
						owner.capital_scope = { save_event_target_as = dead_leader_location }
					}
					leader_event = {
						id = civic_organic_zealots.22
					}
				}
			}
		}
	}
}

# triggered by civic_organic_zealots.21
leader_event = {
	id = civic_organic_zealots.22
	is_triggered_only = yes
	title = civic_organic_zealots.22.name
	desc = civic_organic_zealots.22.desc
	picture = {
		picture = GFX_evt_ship_in_orbit
		trigger = {
			has_leader_flag = leader_location_fleet
		}
	}
	picture = {
		picture = GFX_evt_throne_room
		trigger = {
			has_leader_flag = leader_location_government
		}
	}
	picture = {
		picture = GFX_evt_galactic_community
		trigger = {
			has_leader_flag = leader_location_imperium
		}
	}
	picture = {
		picture = GFX_evt_galactic_empire
		trigger = {
			has_leader_flag = leader_location_galcom
		}
	}
	picture = {
		picture = GFX_evt_voting
		trigger = {
			has_leader_flag = leader_location_federation
		}
	}
	picture = {
		picture = GFX_evt_diplomatic_visit
		trigger = {
			has_leader_flag = leader_location_diplomacy
		}
	}
	picture = {
		picture = GFX_evt_spymaster
		trigger = {
			has_leader_flag = leader_location_spy
		}
	}
	picture = {
		picture = GFX_evt_mysterious_signal
		trigger = {
			has_leader_flag = leader_location_first_contact
		}
	}
	picture = {
		picture = GFX_evt_physics_research
		trigger = {
			has_leader_flag = leader_location_research_physics
		}
	}
	picture = {
		picture = GFX_evt_society_research
		trigger = {
			has_leader_flag = leader_location_research_society
		}
	}
	picture = {
		picture = GFX_evt_engineering_research
		trigger = {
			has_leader_flag = leader_location_research_engineering
		}
	}
	picture = {
		picture = GFX_evt_space_funeral
		trigger = {
			NOR = {
				has_leader_flag = leader_location_fleet
				has_leader_flag = leader_location_government
				has_leader_flag = leader_location_imperium
				has_leader_flag = leader_location_galcom
				has_leader_flag = leader_location_federation
				has_leader_flag = leader_location_diplomacy
				has_leader_flag = leader_location_spy
				has_leader_flag = leader_location_first_contact
				has_leader_flag = leader_location_research_physics
				has_leader_flag = leader_location_research_society
				has_leader_flag = leader_location_research_engineering
			}
		}
	}
	show_sound = event_ship_bridge
	location = event_target:dead_leader_location
	immediate = {
		kill_leader = { show_notification = no }
	}
	option = {
		name = UNFORTUNATE
	}
}

# triggered by on_country_created, attempt to make the Organic Zealots uninterested in fighting the biological crises
# root = country, created
# from = root of context where create_country/create_rebels happens 
country_event = {
	id = civic_organic_zealots.30
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		OR = {
			is_country_type = awakened_marauders
			is_country_type = swarm
			is_country_type = extradimensional
			is_country_type = extradimensional_2
			is_country_type = extradimensional_3
		}
	}
	immediate = {
		every_country = {
			limit = {
				is_ai = yes
				has_valid_ai_personality = yes
				has_ai_personality = organic_zealots
			}
			# set_faction_hostility requires comms
			establish_communications_no_message = prev
			set_faction_hostility = {
				target = prev
				set_friendly = no
				set_neutral = yes
				set_hostile = no
			}
		}
	}
}

# triggered by on_planet_transfer and on_planet_ownerless
# this = planet
# from = country, new owner (if any)
# fromfrom = country, former owner (if any)
planet_event = {
	id = civic_organic_zealots.40
	hide_window = yes
	is_triggered_only = yes
	trigger = { has_deposit = d_contingency_core_sundered }
	immediate = {
		if = {
			limit = {
				exists = from
				from = {
					is_scope_type = country
					is_scope_valid = yes
				}
			}
			from = {
				add_victory_score = {
					source = d_contingency_core_sundered_gained_score
					score = 5000
				}
			}
		}
		if = {
			limit = {
				exists = fromfrom
				fromfrom = {
					is_scope_type = country
					is_scope_valid = yes
				}
			}
			fromfrom = {
				add_victory_score = {
					source = d_contingency_core_sundered_lost_score
					score = -5000
				}
			}
		}
	}
}

# prepare cybernetic Pops to be deassimilated - fired by on_yearly_pulse before action.64, see common/on_actions/000_civic_organic_zealots_early_on_actions.txt
# because the correct flags are set, the changes will be picked up automatically by assimilation_effect without changes
event = {
	id = civic_organic_zealots.64
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		any_playable_country = {
			num_unique_species > 1
			any_owned_pop_species = { coz_is_undergoing_assimilation_uncyborg_species = yes }
		}
	}
	immediate = {
		log = "civic_organic_zealots.64"
		every_playable_country = {
			limit = {
				num_unique_species > 1
				any_owned_pop_species = { coz_is_undergoing_assimilation_uncyborg_species = yes }
			}
			log = "civic_organic_zealots.64.every_playable_country: [This.GetRealName]"
			every_owned_pop_species = {
				limit = { coz_is_undergoing_assimilation_uncyborg_species = yes }
				log = "civic_organic_zealots.64.every_owned_pop_species: [This.GetName]"
				coz_prepare_uncyborg_species = yes
				event_target:prepared_species = { coz_set_assimilation_flags = yes }
			}
		}
	}
}

# triggered by graygoo.403
# root = country
country_event = {
	id = civic_organic_zealots.404
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		event_target:gray_homeworld = { set_planet_flag = gray_homeworld }
		create_country = {
			name = "NAME_Gray"
			type = gray_angry
			flag = {
				icon= {
					category = "special"
					file = "gray_goo.dds"
				}
				background = {
					category = "backgrounds"
					file = "sinus.dds"
				}
				colors = {
					"grey"
					"dark_grey"
					"null"
					"null"
				}
			}
		}
		create_fleet = {
			name = "NAME_Gray"
			settings = {
				can_upgrade = no
				can_change_composition = no
				can_change_leader = no
				uses_naval_capacity = no
				spawn_debris = no
			}
			effect = {
				set_owner = last_created_country
				create_ship = {
					name = "NAME_Gray"
					design = "NAME_Gray_Warship"
					prefix = no
					upgradable = no
				}
				set_location = {
					target = event_target:gray_homeworld
					distance = 20
					angle = random
				}
				add_modifier = {
					modifier = "gray_warship"
					days = -1
				}
			}
		}
	}
}

# triggered by on_fleet_destroyed_perp
# root = owner of fleet 1 (combatant)
# from = owner of fleet 2 (destroyed)
# fromfrom = fleet 1
# fromfromfrom = fleet 2
country_event = {
	id = civic_organic_zealots.405
	is_triggered_only = yes
	title = "civic_organic_zealots.405.name"
	desc = "civic_organic_zealots.405.desc"
	picture = GFX_evt_exploding_ship
	show_sound = event_celebration
	trigger = {
		is_organic_zealots = yes
		from = { is_country_type = gray_angry }
	}
	immediate = {
		random_galaxy_planet = {
			limit = { has_planet_flag = gray_homeworld }
			save_event_target_as = gray_homeworld
		}
	}
	option = {
		name = "civic_organic_zealots.405.a"
		add_monthly_resource_mult = {
			resource = unity
			value = @tier4unityreward
			min = @tier4unitymin
			max = @tier4unitymax
		}
		hidden_effect = { from = { destroy_country = yes } }
	}
}

# triggered by on_fleet_destroyed_victim
# root = owner of fleet 1 (destroyed)
# from = owner of fleet 2 (combatant)
# fromfrom = fleet 1
# fromfromfrom = fleet 2
country_event = {
	id = civic_organic_zealots.406
	is_triggered_only = yes
	hide_window = yes
	trigger = {
		is_country_type = gray_angry
	}
	immediate = {
		destroy_country = yes
	}
}

# triggered explicitly by syndaw.1025
# root = country, originator
# from = country, ally of originator
# fromfrom = country, uprising
country_event = {
	id = civic_organic_zealots.1025
	is_triggered_only = yes
	title = "civic_organic_zealots.1025.name"
	desc = "civic_organic_zealots.1025.desc"
	picture = GFX_evt_fleet_good
	option = {
		name = ACKNOWLEDGED
		custom_tooltip = "civic_organic_zealots.1025.a.tooltip"
	}
}

# triggered explicitly by syndaw.1025
# root = country, uprising
# from = country, ally of originator
# fromfrom = country, originator
country_event = {
	id = civic_organic_zealots.1026
	is_triggered_only = yes
	title = "civic_organic_zealots.1026.name"
	desc = "civic_organic_zealots.1026.desc"
	picture = GFX_evt_fleet_evil
	option = {
		name = UNFORTUNATE
		custom_tooltip = "civic_organic_zealots.1026.a.tooltip"
	}
}

# triggered explicitly by syndaw.1025
# root = country, originator
# from = country, ally of uprising
# fromfrom = country, uprising
country_event = {
	id = civic_organic_zealots.1027
	is_triggered_only = yes
	title = "civic_organic_zealots.1027.name"
	desc = "civic_organic_zealots.1027.desc"
	picture = GFX_evt_fleet_evil
	option = {
		name = UNFORTUNATE
		custom_tooltip = "civic_organic_zealots.1027.a.tooltip"
	}
}

# triggered explicitly by syndaw.1025
# root = country, uprising
# from = country, ally of uprising
# fromfrom = country, originator
country_event = {
	id = civic_organic_zealots.1028
	is_triggered_only = yes
	title = "civic_organic_zealots.1028.name"
	desc = "civic_organic_zealots.1028.desc"
	picture = GFX_evt_fleet_good
	option = {
		name = ACKNOWLEDGED
		custom_tooltip = "civic_organic_zealots.1028.a.tooltip"
	}
}

# triggered by utopia.2555
# root = country (notified)
# from = country (synthetic)
country_event = {
	id = civic_organic_zealots.2554
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		is_valid_organic_zealots = yes
		exists = from
	}
	immediate = {
		if = {
			limit = {
				from = { has_corporate_government = yes }
				any_owned_planet = { has_branch_office = from }
			}
			every_owned_planet = {
				limit = { has_branch_office = from }
				close_branch_office = yes
				owner = { add_resource = { energy = 1000 } }
			}
			from = {
				country_event = {
					id = civic_organic_zealots.2555
				}
			}
		}
		if = {
			limit = { has_secret_fealty_with = from }
			remove_secret_fealty = from
		}
		end_all_treaties_with = from
	}
}

# triggered by civic_organic_zealots.2554 if any branch offices were closed
# root = country (notified)
# from = country (organic zealots)
country_event = {
	id = civic_organic_zealots.2555
	title = civic_organic_zealots.2555.name
	desc = civic_organic_zealots.2555.desc
	picture = GFX_evt_deficit
	show_sound = event_bad_omen
	is_triggered_only = yes
	immediate = {
		end_all_treaties_with = from
	}
	option = {
		name = civic_organic_zealots.2555.a
	}
}